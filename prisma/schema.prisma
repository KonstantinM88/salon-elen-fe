// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ───────── Контент ───────── */

enum ArticleType {
  NEWS
  PROMO
  ARTICLE
}

model Article {
  id          String       @id @default(cuid())
  slug        String       @unique
  title       String
  excerpt     String?
  cover       String?
  type        ArticleType  @default(NEWS)
  content     String?
  publishedAt DateTime?
  expiresAt   DateTime?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([publishedAt])
  @@index([expiresAt])
}

/* ───────── Старая форма обратной связи (оставляем как есть) ───────── */
model Booking {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String?
  message   String?
  createdAt DateTime @default(now())
}

/* ───────── Онлайн-запись ───────── */

model Service {
  id          String   @id @default(cuid())
  name        String   @map("title")  // в БД колонка title
  slug        String   @unique
  durationMin Int
  priceCents  Int?
  isActive    Boolean  @default(true)

  appointments Appointment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([slug])
  @@map("Service")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  DONE          // ← добавили для метрик визитов
}

/* ───────── Новый клиент ───────── */
model Client {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String   @unique
  birthDate DateTime
  referral  String?
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("Client")
}

model Appointment {
  id            String             @id @default(cuid())

  serviceId     String
  service       Service            @relation(fields: [serviceId], references: [id])

  clientId      String?
  client        Client?            @relation(fields: [clientId], references: [id])

  startAt       DateTime
  endAt         DateTime

  customerName  String             // сохраняем «как представился»
  phone         String
  email         String?
  notes         String?

  status        AppointmentStatus  @default(PENDING)

  createdAt     DateTime           @default(now())

  @@index([clientId])
  @@index([startAt, endAt])
  @@index([serviceId])
  @@index([status])
  @@unique([serviceId, startAt])
  @@map("Appointment")
}

model WorkingHours {
  id           String  @id @default(cuid())
  weekday      Int
  startMinutes Int
  endMinutes   Int
  isClosed     Boolean @default(false)
  createdAt    DateTime @default(now())
  @@unique([weekday])
}

model TimeOff {
  id           String  @id @default(cuid())
  date         DateTime
  startMinutes Int
  endMinutes   Int
  reason       String?
  createdAt    DateTime @default(now())
  @@index([date])
}
