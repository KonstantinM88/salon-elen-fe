generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ───────── Контент ─────────
 */

enum ArticleType {
  NEWS
  PROMO
  ARTICLE
}

model Article {
  id          String      @id @default(cuid())
  slug        String      @unique
  title       String
  excerpt     String?
  cover       String?
  type        ArticleType @default(NEWS)
  content     String?
  publishedAt DateTime?
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([publishedAt])
  @@index([expiresAt])
}

/**
 * ───────── Старая форма обратной связи (оставляем как есть) ─────────
 */
model Booking {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String?
  message   String?
  createdAt DateTime @default(now())
}

/**
 * ───────── Онлайн-запись ─────────
 */

model Service {
  id          String  @id @default(cuid())
  name        String  @map("title")
  slug        String  @unique
  description String?
  durationMin Int
  priceCents  Int?
  isActive    Boolean @default(true)

  parentId String?
  parent   Service?  @relation("ServiceChildren", fields: [parentId], references: [id])
  children Service[] @relation("ServiceChildren")

  appointments Appointment[]

  /// m:n с мастерами (implicit join table)
  masters Master[] @relation("MasterServices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([slug])
  @@index([parentId])
  @@map("Service")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  DONE
}

/**
 * ───────── Клиент ─────────
 */
model Client {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String   @unique
  birthDate DateTime
  referral  String?
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("Client")
}

/**
 * ───────── Мастера и их персональный график ─────────
 */

model Master {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String   @unique
  birthDate DateTime
  bio       String?
  avatarUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  services     Service[]            @relation("MasterServices")
  workingHours MasterWorkingHours[]
  timeOff      MasterTimeOff[]
}

model MasterWorkingHours {
  id       String @id @default(cuid())
  masterId String
  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)

  /// 0 = Sunday ... 6 = Saturday
  weekday      Int
  startMinutes Int
  endMinutes   Int
  isClosed     Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([masterId, weekday])
}

model MasterTimeOff {
  id       String @id @default(cuid())
  masterId String
  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)

  /// Дата (обычно полночь локальной TZ) + интервал
  date         DateTime
  startMinutes Int
  endMinutes   Int
  reason       String?

  createdAt DateTime @default(now())

  @@index([masterId, date])
}

model Appointment {
  id String @id @default(cuid())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  /// Связь с мастером (оставляем optional для обратной совместимости)
  masterId String?
  master   Master? @relation(fields: [masterId], references: [id])

  startAt DateTime
  endAt   DateTime

  customerName String
  phone        String
  email        String?
  notes        String?

  status AppointmentStatus @default(PENDING)

  createdAt DateTime @default(now())

  // ⬇ ВАЖНО: убрали уникальность по (serviceId, startAt), чтобы разные мастера
  // могли выполнять одинаковые подуслуги в одно время.
  // Вместо этого — индексы для быстрых проверок пересечений:
  @@index([masterId])
  @@index([serviceId])
  @@index([status])
  @@index([clientId])
  @@index([startAt, endAt])
  @@index([masterId, startAt]) // частый фильтр при проверке свободности мастера

  @@map("Appointment")
}

/**
 * ───────── Глобальный график салона ─────────
 */

model WorkingHours {
  id           String   @id @default(cuid())
  weekday      Int
  startMinutes Int
  endMinutes   Int
  isClosed     Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@unique([weekday])
}

model TimeOff {
  id           String   @id @default(cuid())
  date         DateTime
  startMinutes Int
  endMinutes   Int
  reason       String?
  createdAt    DateTime @default(now())

  @@index([date])
}
