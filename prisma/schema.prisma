generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ───────── Контент ───────── 

enum ArticleType {
  NEWS
  PROMO
  ARTICLE
}

model Article {
  id          String      @id @default(cuid())
  slug        String      @unique
  title       String
  excerpt     String?
  cover       String?
  type        ArticleType @default(NEWS)
  content     String?
  publishedAt DateTime?
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([publishedAt])
  @@index([expiresAt])
}

// ───────── Старая форма обратной связи ───────── 

model Booking {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String?
  message   String?
  createdAt DateTime @default(now())
}

// ───────── Онлайн-запись ───────── 

model Service {
  id          String  @id @default(cuid())
  name        String  @map("title")
  slug        String  @unique
  description String?
  durationMin Int
  priceCents  Int?
  isActive    Boolean @default(true)

  /// Мягкое удаление: скрываем из интерфейса,
  /// данные и связи остаются (для истории).
  isArchived  Boolean @default(false)

  parentId String?
  parent   Service?  @relation("ServiceChildren", fields: [parentId], references: [id])
  children Service[] @relation("ServiceChildren")

  appointments Appointment[]

  /// m:n с мастерами (implicit join table)
  masters Master[] @relation("MasterServices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([isArchived])
  @@index([slug])
  @@index([parentId])
  @@map("Service")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  DONE
}

// ───────── Клиент ───────── 

model Client {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String   @unique
  birthDate DateTime
  referral  String?
  notes     String?

  // связь с User (опционально, для личного кабинета)
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("Client")
}

// ───────── Мастера и их персональный график ───────── 

model Master {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String   @unique
  birthDate DateTime
  bio       String?
  avatarUrl String?

  // связь 1:1 с User (мастер может логиниться)
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  services     Service[]            @relation("MasterServices")
  workingHours MasterWorkingHours[]
  timeOff      MasterTimeOff[]
}

model MasterWorkingHours {
  id       String @id @default(cuid())
  masterId String
  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)

  /// 0 = Sunday ... 6 = Saturday
  weekday      Int
  startMinutes Int
  endMinutes   Int
  isClosed     Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([masterId, weekday])
}

model MasterTimeOff {
  id       String @id @default(cuid())
  masterId String
  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)

  /// Дата (обычно полночь локальной TZ) + интервал
  date         DateTime
  startMinutes Int
  endMinutes   Int
  reason       String?

  createdAt DateTime @default(now())

  @@index([masterId, date])
}

model Appointment {
  id String @id @default(cuid())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  /// Связь с мастером (optional — для обратной совместимости)
  masterId String?
  master   Master? @relation(fields: [masterId], references: [id])

  startAt DateTime
  endAt   DateTime

  customerName String
  phone        String
  email        String?
  notes        String?

  status AppointmentStatus @default(PENDING)

  createdAt DateTime @default(now())
  appt_range Unsupported("tstzrange")? @map("appt_range")

  // Индексы для быстрого поиска и проверок пересечений:
  @@index([masterId])
  @@index([serviceId])
  @@index([status])
  @@index([clientId])
  @@index([startAt, endAt])
  @@index([masterId, startAt])
  @@map("Appointment")
}

// ───────── Глобальный график салона ───────── 

model WorkingHours {
  id           String   @id @default(cuid())
  weekday      Int
  startMinutes Int
  endMinutes   Int
  isClosed     Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@unique([weekday])
}

model TimeOff {
  id           String   @id @default(cuid())
  date         DateTime
  startMinutes Int
  endMinutes   Int
  reason       String?
  createdAt    DateTime @default(now())

  @@index([date])
}

// ───────── RBAC + NextAuth ───────── 

enum Role {
  USER
  MASTER
  ADMIN
}

model User {
  id           String  @id @default(cuid())
  name         String?
  email        String  @unique
  phone        String?
  image        String?
  role         Role    @default(USER)
  passwordHash String?

  // связи 1:1 обратно из Master/Client
  master Master?
  client Client?

  // next-auth
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ───────── Архив удалённых логинов ───────── 

model OrphanedUser {
  id           String   @id @default(cuid())
  email        String   @unique
  role         Role
  name         String?
  sourceUserId String?
  archivedAt   DateTime @default(now())

  @@index([archivedAt])
}
