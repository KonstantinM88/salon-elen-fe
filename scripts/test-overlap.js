// test-overlap.js
// –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
// –ó–∞–ø—É—Å–∫: node test-overlap.js

console.log('üß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n');
console.log('‚ïê'.repeat(70));

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
function checkOverlap(existingStart, existingEnd, newStart, newEnd) {
  // –õ–æ–≥–∏–∫–∞ –∏–∑ Prisma –∑–∞–ø—Ä–æ—Å–∞:
  // startAt < newEnd AND endAt > newStart
  const startBefore = existingStart < newEnd;
  const endAfter = existingEnd > newStart;
  
  return startBefore && endAfter;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const tests = [
  {
    name: '–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T16:45:00Z'],
    new: ['2025-11-03T15:00:00Z', '2025-11-03T16:45:00Z'],
    shouldOverlap: true,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π',
    existing: ['2025-11-03T14:00:00Z', '2025-11-03T18:00:00Z'],
    new: ['2025-11-03T15:00:00Z', '2025-11-03T16:00:00Z'],
    shouldOverlap: true,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T14:00:00Z', '2025-11-03T16:00:00Z'],
    shouldOverlap: true,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω–µ—Ü',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T16:00:00Z', '2025-11-03T18:00:00Z'],
    shouldOverlap: true,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T16:00:00Z'],
    new: ['2025-11-03T14:00:00Z', '2025-11-03T18:00:00Z'],
    shouldOverlap: true,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (–ø—Ä–∏–º—ã–∫–∞–µ—Ç)',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T13:00:00Z', '2025-11-03T15:00:00Z'],
    shouldOverlap: false, // –ì—Ä–∞–Ω–∏—Ü–∞ - –Ω–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (–ø—Ä–∏–º—ã–∫–∞–µ—Ç)',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T17:00:00Z', '2025-11-03T19:00:00Z'],
    shouldOverlap: false, // –ì—Ä–∞–Ω–∏—Ü–∞ - –Ω–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (—Å –∑–∞–∑–æ—Ä–æ–º)',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T13:00:00Z', '2025-11-03T14:00:00Z'],
    shouldOverlap: false,
  },
  {
    name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (—Å –∑–∞–∑–æ—Ä–æ–º)',
    existing: ['2025-11-03T15:00:00Z', '2025-11-03T17:00:00Z'],
    new: ['2025-11-03T18:00:00Z', '2025-11-03T20:00:00Z'],
    shouldOverlap: false,
  },
];

let passed = 0;
let failed = 0;

tests.forEach((test, idx) => {
  const existingStart = new Date(test.existing[0]);
  const existingEnd = new Date(test.existing[1]);
  const newStart = new Date(test.new[0]);
  const newEnd = new Date(test.new[1]);
  
  const result = checkOverlap(existingStart, existingEnd, newStart, newEnd);
  const success = result === test.shouldOverlap;
  
  console.log(`\n–¢–µ—Å—Ç ${idx + 1}: ${test.name}`);
  console.log('-'.repeat(70));
  console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è: ${test.existing[0]} ‚Üí ${test.existing[1]}`);
  console.log(`–ù–æ–≤–∞—è:        ${test.new[0]} ‚Üí ${test.new[1]}`);
  console.log(`–û–∂–∏–¥–∞–µ—Ç—Å—è: ${test.shouldOverlap ? '–ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï' : '–ù–ï–¢ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø'}`);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result ? '–ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï' : '–ù–ï–¢ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø'}`);
  console.log(`${success ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  
  if (success) {
    passed++;
  } else {
    failed++;
  }
});

console.log('\n' + '‚ïê'.repeat(70));
console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: ${passed}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
if (failed > 0) {
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
} else {
  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
}

console.log('\n' + '‚ïê'.repeat(70));
console.log('\nüí° –í–´–í–û–î–´:');
console.log('–õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: startAt < newEnd AND endAt > newStart');
console.log('–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.');
console.log('\n–ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –ª–æ–≥–∏–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è.');
console.log('–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
console.log('1. –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω–∞—Ö (UTC vs Local)');
console.log('2. –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –≤ –¥–∞—Ç–∞—Ö');
console.log('3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
console.log('4. Race condition –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö');